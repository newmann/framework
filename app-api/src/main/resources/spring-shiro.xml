<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">



	<!-- Subject工厂 -->

	<!--<bean id="subjectFactory"-->
		<!--class=" com.beiyelin.service.footstone.secure.mgt.StatelessDefaultSubjectFactory" />-->



	<!-- Realm实现 -->
	<bean id="statelessRealm" class="com.beiyelin.service.footstone.secure.realm.StatelessRealm">
		<property name="cachingEnabled" value="false" />
	</bean>


	<!-- 会话DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"/>

	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--<property name="sessionValidationSchedulerEnabled" value="false" />-->
		<property name="sessionDAO" ref="sessionDAO"/>
	</bean>



	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="statelessRealm" />
		<!--<property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value="false" />-->
		<!--<property name="subjectFactory" ref="subjectFactory" />-->
		<property name="sessionManager" ref="sessionManager" />
        <property name="sessionMode" value="native" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
		<!--<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>-->
		<!--<property name="arguments" ref="securityManager" />-->
	<!--</bean>-->

	<!--<bean id="statelessAuthcFilter" class="com.beiyelin.service.footstone.secure.filter.StatelessAuthcFilter"/>-->
    <!--<bean id="noSessionCreation" class="org.apache.shiro.web.filter.session.NoSessionCreationFilter"/>-->
    <!--<bean id="anon" class="org.apache.shiro.web.filter.authc.AnonymousFilter"/>-->
    <!--<bean id="authcBasic" class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter"/>-->

	<!-- restNossion过滤器 -->
	<bean id="restNosession"
		class="com.beiyelin.service.footstone.secure.filter.NoSesstionHttpMethodPermissionFilter" />
	<!--<bean id ="permissionFilter" class="com.beiyelin.service.footstone.secure.filter.NoSessionPermissionAuthorizationFilter"/>-->

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
        <!--<property name="loginUrl" value="/public/index"/>-->
		<property name="filters">
			<util:map>
				<entry key="restNoSession" value-ref="restNosession"/>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
            <!--根据路径进行权限控制，
                /public　　下面的内容可以被任意人访问
                /api        下面的内容通过stateless token方式范围
                /web           下面内容按常用的session方式访问
                /api/**=noSessionCreation,rest
                -->
			<value>
                /public/** = noSessionCreation,anon
				/api/user/login/** = noSessionCreation,anon
				/api/** = restNoSession
			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>